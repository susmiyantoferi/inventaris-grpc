// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: produk/produk_service.proto

package produkpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProdukService_GetProdukById_FullMethodName = "/produk.ProdukService/GetProdukById"
	ProdukService_GetAllProduk_FullMethodName  = "/produk.ProdukService/GetAllProduk"
)

// ProdukServiceClient is the client API for ProdukService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProdukServiceClient interface {
	GetProdukById(ctx context.Context, in *GetProdukReq, opts ...grpc.CallOption) (*Produk, error)
	GetAllProduk(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProdukList, error)
}

type produkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProdukServiceClient(cc grpc.ClientConnInterface) ProdukServiceClient {
	return &produkServiceClient{cc}
}

func (c *produkServiceClient) GetProdukById(ctx context.Context, in *GetProdukReq, opts ...grpc.CallOption) (*Produk, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Produk)
	err := c.cc.Invoke(ctx, ProdukService_GetProdukById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *produkServiceClient) GetAllProduk(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProdukList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProdukList)
	err := c.cc.Invoke(ctx, ProdukService_GetAllProduk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProdukServiceServer is the server API for ProdukService service.
// All implementations must embed UnimplementedProdukServiceServer
// for forward compatibility.
type ProdukServiceServer interface {
	GetProdukById(context.Context, *GetProdukReq) (*Produk, error)
	GetAllProduk(context.Context, *Empty) (*ProdukList, error)
	mustEmbedUnimplementedProdukServiceServer()
}

// UnimplementedProdukServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProdukServiceServer struct{}

func (UnimplementedProdukServiceServer) GetProdukById(context.Context, *GetProdukReq) (*Produk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProdukById not implemented")
}
func (UnimplementedProdukServiceServer) GetAllProduk(context.Context, *Empty) (*ProdukList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProduk not implemented")
}
func (UnimplementedProdukServiceServer) mustEmbedUnimplementedProdukServiceServer() {}
func (UnimplementedProdukServiceServer) testEmbeddedByValue()                       {}

// UnsafeProdukServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdukServiceServer will
// result in compilation errors.
type UnsafeProdukServiceServer interface {
	mustEmbedUnimplementedProdukServiceServer()
}

func RegisterProdukServiceServer(s grpc.ServiceRegistrar, srv ProdukServiceServer) {
	// If the following call pancis, it indicates UnimplementedProdukServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProdukService_ServiceDesc, srv)
}

func _ProdukService_GetProdukById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProdukReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdukServiceServer).GetProdukById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdukService_GetProdukById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdukServiceServer).GetProdukById(ctx, req.(*GetProdukReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdukService_GetAllProduk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdukServiceServer).GetAllProduk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProdukService_GetAllProduk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdukServiceServer).GetAllProduk(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ProdukService_ServiceDesc is the grpc.ServiceDesc for ProdukService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProdukService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "produk.ProdukService",
	HandlerType: (*ProdukServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProdukById",
			Handler:    _ProdukService_GetProdukById_Handler,
		},
		{
			MethodName: "GetAllProduk",
			Handler:    _ProdukService_GetAllProduk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "produk/produk_service.proto",
}
